#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform"

require 'optparse'

options = {all: false, ontologies: []}
opt_parser = OptionParser.new do |opts|
  opts.on('-a', '--all-ontologies', 'Generate metrics files for ALL ontologies (this OR -o option required).') do
    options[:all] = true
  end

  opts.on('-o', '--ontologies ACRONYM1,ACRONYM2,ACRONYM3', 'Comma-separated list of ontologies to generate metrics file for (this OR -a option required).') do |acronyms|
    options[:ontologies] = acronyms.split(",").map {|o| o.strip}
  end

  options[:logfile] = STDOUT
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is STDOUT)" ) do |filename|
    options[:logfile] = filename
  end

  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!

if (options[:ontologies].empty? && !options[:all]) || (options[:all] && !options[:ontologies].empty?)
  puts opt_parser.help
  exit(1)
end

begin
  logger = Logger.new(options[:logfile])
  includes = LinkedData::Models::OntologySubmission.goo_attrs_to_load
  includes << :submissionStatus unless includes.include?(:submissionStatus)
  submissions_query = LinkedData::Models::OntologySubmission.where(submissionStatus: [code: "RDF"])
  submissions = submissions_query.include(includes).to_a

  # Figure out latest parsed submissions using all submissions
  latest_submissions = {}

  submissions.each do |sub|
    acronym = sub.ontology.acronym
    next unless options[:all] || options[:ontologies].include?(acronym)
    latest_submissions[acronym] ||= sub
    latest_submissions[acronym] = sub if sub.submissionId > latest_submissions[acronym].submissionId
  end

  if options[:all]
    msg = "Generating metrics files for all ontologies\nTotal number of submissions: #{latest_submissions.length}"
  else
    msg = "Generating metrics files for ontologies: #{options[:ontologies]}"
  end
  puts msg
  logger.info(msg)
  puts "Processing details are logged to #{options[:logfile]}" unless options[:logfile] == STDOUT

  latest_submissions.each do |acronym, sub|
    begin
      if sub.hasOntologyLanguage.umls?
        sub.generate_umls_metrics_file
        logger.info("Generated metrics file for submission #{sub.id.to_s} using UMLS TTL file")
        logger.flush
      else
        metrics_id = RDF::URI.new(sub.id.to_s + "/metrics")
        metrics = LinkedData::Models::Metric.find(metrics_id).first

        unless metrics
          logger.info("No existing metrics found for submission #{sub.id.to_s}. Generating...")
          logger.flush
          NcboCron::Models::OntologySubmissionParser.new.process_submission(logger, sub.id.to_s,
                                                                            {process_rdf: false, diff: false,
                                                                             index_search: false, index_commit: false,
                                                                             run_metrics: true, reasoning: false})
          metrics = LinkedData::Models::Metric.find(metrics_id).first
        end

        if metrics
          metrics.bring(:classes)
          metrics.bring(:individuals)
          metrics.bring(:properties)
          sub.generate_metrics_file(metrics.classes, metrics.individuals, metrics.properties)
          logger.info("Generated metrics file for submission #{sub.id.to_s} using existing metrics")
          logger.flush
        else
          raise Exception.new("No existing metrics found and an attempt at generating metrics failed.")
        end
      end
    rescue Exception => e
      msg = "Error generating metrics file for submission #{sub.id.to_s}: #{e.message}"
      logger.error(msg)
      logger.flush
    end
  end
rescue Exception => e
  msg = "Failed generating metrics files with exception: #{e.class}: #{e.message}\n#{e.backtrace.join("\n")}"
  logger.error(msg)
  exit(1)
end
